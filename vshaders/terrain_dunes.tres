[gd_resource type="VisualShader" load_steps=29 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=2]
constant = 0.26

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "color"

[sub_resource type="VisualShaderNodeColorOp" id=4]
operator = 4

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "transmision_color"

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=9]

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "scale_normal"

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "texture"

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "normal"

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=14]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "uv_scale_color"

[sub_resource type="VisualShaderNodeVectorCompose" id=17]

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "height_scale"

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=23]
uniform_name = "heightmap"

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorCompose" id=25]

[sub_resource type="VisualShaderNodeVectorDecompose" id=26]

[sub_resource type="VisualShaderNodeScalarOp" id=27]

[sub_resource type="VisualShaderNodeVectorDecompose" id=28]

[resource]
code = "shader_type spatial;
render_mode vertex_lighting;

uniform float height_scale;
uniform sampler2D heightmap;
uniform float uv_scale_color;
uniform sampler2D texture;
uniform vec4 color : hint_color;
uniform float scale_normal;
uniform sampler2D normal;
uniform vec4 transmision_color : hint_color;



void vertex() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// VectorDecompose:5
	float n_out5p0;
	float n_out5p1;
	float n_out5p2;
	n_out5p0 = n_out2p0.x;
	n_out5p1 = n_out2p0.y;
	n_out5p2 = n_out2p0.z;

// ScalarUniform:13
	float n_out13p0;
	n_out13p0 = height_scale;

// VectorCompose:10
	float n_in10p2 = 0.00000;
	vec3 n_out10p0;
	n_out10p0 = vec3( n_out5p0 , n_out5p2 , n_in10p2 );

// TextureUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 n_tex_read = texture( heightmap , n_out10p0.xy );
		n_out15p0 = n_tex_read.rgb;
		n_out15p1 = n_tex_read.a;
	}

// VectorDecompose:7
	float n_out7p0;
	float n_out7p1;
	float n_out7p2;
	n_out7p0 = n_out15p0.x;
	n_out7p1 = n_out15p0.y;
	n_out7p2 = n_out15p0.z;

// ScalarOp:14
	float n_out14p0;
	n_out14p0 = n_out13p0 * n_out7p0;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out5p1 + n_out14p0;

// VectorCompose:4
	vec3 n_out4p0;
	n_out4p0 = vec3( n_out5p0 , n_out6p0 , n_out5p2 );

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Input:5
	vec3 n_out5p0;
	n_out5p0 = vec3(UV,0.0);

// VectorDecompose:8
	float n_out8p0;
	float n_out8p1;
	float n_out8p2;
	n_out8p0 = n_out5p0.x;
	n_out8p1 = n_out5p0.y;
	n_out8p2 = n_out5p0.z;

// ScalarUniform:6
	float n_out6p0;
	n_out6p0 = uv_scale_color;

// ScalarOp:9
	float n_out9p0;
	n_out9p0 = n_out8p0 * n_out6p0;

// ScalarOp:10
	float n_out10p0;
	n_out10p0 = n_out8p1 * n_out6p0;

// VectorCompose:7
	float n_in7p2 = 0.00000;
	vec3 n_out7p0;
	n_out7p0 = vec3( n_out9p0 , n_out10p0 , n_in7p2 );

// TextureUniform:23
	vec3 n_out23p0;
	float n_out23p1;
	{
		vec4 n_tex_read = texture( texture , n_out7p0.xy );
		n_out23p0 = n_tex_read.rgb;
		n_out23p1 = n_tex_read.a;
	}

// ColorUniform:13
	vec3 n_out13p0;
	float n_out13p1;
	n_out13p0 = color.rgb;
	n_out13p1 = color.a;

// ColorOp:14
	vec3 n_out14p0;
	{
		float base=n_out23p0.x;
		float blend=n_out13p0.x;
		if (base < 0.5) {
			n_out14p0.x = 2.0 * base * blend;
		} else {
			n_out14p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out23p0.y;
		float blend=n_out13p0.y;
		if (base < 0.5) {
			n_out14p0.y = 2.0 * base * blend;
		} else {
			n_out14p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out23p0.z;
		float blend=n_out13p0.z;
		if (base < 0.5) {
			n_out14p0.z = 2.0 * base * blend;
		} else {
			n_out14p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Scalar:12
	float n_out12p0;
	n_out12p0 = 0.260000;

// Scalar:4
	float n_out4p0;
	n_out4p0 = 1.000000;

// Scalar:3
	float n_out3p0;
	n_out3p0 = 0.100000;

// ScalarUniform:22
	float n_out22p0;
	n_out22p0 = scale_normal;

// ScalarOp:19
	float n_out19p0;
	n_out19p0 = n_out8p0 * n_out22p0;

// ScalarOp:20
	float n_out20p0;
	n_out20p0 = n_out8p1 * n_out22p0;

// VectorCompose:21
	float n_in21p2 = 0.00000;
	vec3 n_out21p0;
	n_out21p0 = vec3( n_out19p0 , n_out20p0 , n_in21p2 );

// TextureUniform:24
	vec3 n_out24p0;
	float n_out24p1;
	{
		vec4 n_tex_read = texture( normal , n_out21p0.xy );
		n_out24p0 = n_tex_read.rgb;
		n_out24p1 = n_tex_read.a;
	}

// Scalar:17
	float n_out17p0;
	n_out17p0 = 2.000000;

// ColorUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	n_out15p0 = transmision_color.rgb;
	n_out15p1 = transmision_color.a;

// Output:0
	ALBEDO = n_out14p0;
	METALLIC = n_out12p0;
	ROUGHNESS = n_out4p0;
	SPECULAR = n_out3p0;
	NORMALMAP = n_out24p0;
	NORMALMAP_DEPTH = n_out17p0;
	TRANSMISSION = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 138.68, 42.1458 )
flags/vertex_lighting = true
nodes/vertex/0/position = Vector2( 1800, 80 )
nodes/vertex/2/node = SubResource( 24 )
nodes/vertex/2/position = Vector2( 20, 80 )
nodes/vertex/4/node = SubResource( 25 )
nodes/vertex/4/position = Vector2( 1600, 80 )
nodes/vertex/5/node = SubResource( 26 )
nodes/vertex/5/position = Vector2( 240, 80 )
nodes/vertex/6/node = SubResource( 27 )
nodes/vertex/6/position = Vector2( 1360, 80 )
nodes/vertex/7/node = SubResource( 28 )
nodes/vertex/7/position = Vector2( 900, 180 )
nodes/vertex/10/node = SubResource( 20 )
nodes/vertex/10/position = Vector2( 480, 180 )
nodes/vertex/13/node = SubResource( 21 )
nodes/vertex/13/position = Vector2( 900, 40 )
nodes/vertex/14/node = SubResource( 22 )
nodes/vertex/14/position = Vector2( 1140, 120 )
nodes/vertex/15/node = SubResource( 23 )
nodes/vertex/15/position = Vector2( 680, 100 )
nodes/vertex/connections = PoolIntArray( 2, 0, 5, 0, 4, 0, 0, 0, 6, 0, 4, 1, 5, 0, 4, 0, 5, 2, 4, 2, 5, 1, 6, 0, 14, 0, 6, 1, 7, 0, 14, 1, 13, 0, 14, 0, 5, 0, 10, 0, 5, 2, 10, 1, 10, 0, 15, 0, 15, 0, 7, 0 )
nodes/fragment/0/position = Vector2( 1420, 240 )
nodes/fragment/3/node = SubResource( 13 )
nodes/fragment/3/position = Vector2( 1140, 360 )
nodes/fragment/4/node = SubResource( 14 )
nodes/fragment/4/position = Vector2( 1140, 300 )
nodes/fragment/5/node = SubResource( 15 )
nodes/fragment/5/position = Vector2( -280, 140 )
nodes/fragment/6/node = SubResource( 16 )
nodes/fragment/6/position = Vector2( -80, 280 )
nodes/fragment/7/node = SubResource( 17 )
nodes/fragment/7/position = Vector2( 400, 160 )
nodes/fragment/8/node = SubResource( 18 )
nodes/fragment/8/position = Vector2( -80, 140 )
nodes/fragment/9/node = SubResource( 19 )
nodes/fragment/9/position = Vector2( 160, 100 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 180, 220 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 1140, 240 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 900, 160 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 1120, 120 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 1140, 520 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( 1140, 440 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( 460, 300 )
nodes/fragment/20/node = SubResource( 8 )
nodes/fragment/20/position = Vector2( 460, 420 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( 720, 380 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( 160, 440 )
nodes/fragment/23/node = SubResource( 11 )
nodes/fragment/23/position = Vector2( 680, 80 )
nodes/fragment/24/node = SubResource( 12 )
nodes/fragment/24/position = Vector2( 920, 300 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 4, 4, 0, 0, 3, 5, 0, 8, 0, 8, 0, 9, 0, 6, 0, 9, 1, 9, 0, 7, 0, 10, 0, 7, 1, 8, 1, 10, 0, 6, 0, 10, 1, 12, 0, 0, 2, 14, 0, 0, 0, 13, 0, 14, 1, 15, 0, 0, 17, 17, 0, 0, 9, 8, 0, 19, 0, 8, 1, 20, 0, 22, 0, 19, 1, 22, 0, 20, 1, 19, 0, 21, 0, 20, 0, 21, 1, 7, 0, 23, 0, 23, 0, 14, 0, 21, 0, 24, 0, 24, 0, 0, 8 )
